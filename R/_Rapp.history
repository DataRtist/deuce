fetch_draw <- function(tournament, year, type = "GrandSlam", maxround = 7, surface = "Hard") {#
    base_url <- "http://www.atpworldtour.com/Share/Event-Draws.aspx?year=YEAR&EventId=TOURNAMENT&Draw=ms"#
    base_url <- sub("YEAR", year, base_url)#
    base_url <- sub("TOURNAMENT", tournament, base_url)#
    the_source <- readLines(con = base_url, warn = FALSE)#
    lines <- grep("Player1Link.*>", the_source)#
    if (length(lines) == 0) #
        NA else {#
        Rounds <- 2^(maxround:0)#
        LineNumbers <- list(lines[1] + 0:(Rounds[1] - 1) * 12)#
        LineNumbers[[2]] <- LineNumbers[[1]][Rounds[1]] + cumsum(rep(c(12, 11), c(1, Rounds[2] - 1)))#
        for (i in 3:length(Rounds)) LineNumbers[[i]] <- max(LineNumbers[[i - 1]]) + cumsum(rep(c(15, 11), c(1, Rounds[i] - 1)))#
        Players <- lapply(LineNumbers, function(x) {#
            sub("(.*>)([A-Za-z].*)(</a>$)", "\\2", the_source[x])#
        })#
        Ranks <- sub("(.*highestRound.>)(.*)(<.p>)", "\\2", the_source[grep("highestRound", the_source)])#
        Ranks[grep("[0-9]", Ranks)] <- sub("(.)([0-9]+)(.)", "\\2", Ranks[grep("[0-9]", Ranks)])#
        names(Ranks) <- unlist(Players)[1:length(Ranks)]#
        Order <- 1:length(Ranks)#
        if (type == "GrandSlam") #
            Points <- c(2000, 1200, 720, 360, 180, 90, 45, 10) else if (type == "Masters128") #
            Points <- c(1000, 600, 360, 180, 90, 45, 25, 10) else if (type == "Masters64") #
            Points <- c(1000, 600, 360, 180, 90, 45, 10) else if (type == "50064") #
            Points <- c(250, 125, 60, 30, 15, 10, 5) else Points <- c(250, 125, 60, 30, 15, 5)#
        Result <- data.frame(Player = unlist(Players), Round = rep(Rounds, Rounds), Points = rep(Points[length(Points):1], Rounds))#
        Date <- the_source[grep("tournamentSubTitle", the_source)]#
        Date <- sub("(.* )([0-9][0-9]\\.[0-9][0-9]\\.[0-9][0-9][0-9][0-9])(.*)", "\\2", Date)#
        Title <- the_source[grep("tournamentTitle", the_source)]#
        Title <- sub("(.*aspx.>)(.*)(<.a>.*)", "\\2", Title)#
        Result <- Result[Result$Player != "", ]#
        Result <- Result[order(Result$Player, Result$Round), ]#
        BestResult <- sapply(unique(Result$Player), function(x) which(Result$Player == x)[1])#
        Result <- Result[BestResult, ]#
        Result$surface <- surface#
        Result$year <- year#
        Result$Rank <- Ranks[match(Result$Player, names(Ranks))]#
        Result$Order <- Order[match(Result$Player, names(Ranks))]#
        Result$Date <- Date#
        Result$Title <- Title#
        Result[order(Result$Order), ]#
    }#
}
load("~/Code/deuce/data/tournament.codes.RData")
objects()
head(tournament.codes)
fetch_draw(807,2013,"Master64",7,"Clay")
fetch_draw(807,2013,"Master",6,"Clay")
fetch_draw(807,2013,"Master",5,"Clay")
write.table(tournament.codes, file = "~/temp/tournament_codes.csv")
write.table(tournament.codes, file = "~/Desktop/tournament_codes.csv")
library(deuce)
temp <- fetch_matchfacts("Brisbane", 2013, "Murray A.")
names(temp)
player <- "Murray A."
year <- 2013
Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))
Code
rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F", "W")#
    Round <- rep(rounds, length(tournament) * length(player))#
    Code <- rep(rep(Code, each = length(rounds)), length(tournament))#
    Year <- rep(year, length = length(Code))
tournament <- "Brisbane"
rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F", "W")#
    Round <- rep(rounds, length(tournament) * length(player))#
    Code <- rep(rep(Code, each = length(rounds)), length(tournament))#
    Year <- rep(year, length = length(Code))#
    Tournament <- rep(tournament, each = length(player) * length(rounds))#
    Player <- rep(rep(player, each = length(rounds)), length(tournament))
Round
Code
Year
Tournament
Player
length(Player)
length(Tournament)
Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = Round,#
    			  MoreArgs = list(tournament = Tournament, #
    					round = Round,#
    					code = Code),#
    			SIMPLIFY = FALSE))
URLMatchFacts <- fetch_matchfacts_url(tournament, year, "R64", "MC10")
fetch_matchfacts_url <- function(tournament="ATP World Tour Masters 1000 Madrid", year=2012, round="R64", code){#
	       tournaments <- structure(list(code = c(807L, 6116L, 421L, 422L, 404L, 1536L, #
403L, 410L, 352L, 416L, 5014L, 301L, 580L, 1720L, 425L, 328L, #
316L, 747L, 339L, 773L, 506L, 360L, 891L, 499L, 451L, 495L, 741L, #
468L, 314L, 500L, 414L, 717L, 319L, 6003L, 311L, 496L, 402L, #
341L, 375L, 438L, 308L, 315L, 6120L, 6932L, 520L, 407L, 424L, #
533L, 440L, 568L, 429L, 321L, 338L, 329L, 439L, 560L, 573L, 337L, #
505L, 418L, 540L, 6242L, 2276L), location = structure(c(1L, 2L, #
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, #
17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, #
30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 43L, #
44L, 46L, 47L, 48L, 50L, 51L, 49L, 53L, 54L, 55L, 56L, 57L, 58L, #
42L, 59L, 60L, 61L, 62L, 52L, 45L, 63L), .Label = c("Acapulco", #
"Atlanta", "ATP World Tour Masters 1000 Canada", "ATP World Tour Masters 1000 Cincinnati", #
"ATP World Tour Masters 1000 Indian Wells", "ATP World Tour Masters 1000 Madrid", #
"ATP World Tour Masters 1000 Miami", "ATP World Tour Masters 1000 Monte Carlo", #
"ATP World Tour Masters 1000 Paris", "ATP World Tour Masters 1000 Rome", #
"ATP World Tour Masters 1000 Shanghai", "Auckland", "Australia", #
"Bangkok", "Barcelona", "Basel", "Bastad", "Beijing", "Brisbane", #
"Bucharest", "Buenos Aires", "Casablanca", "Chennai", "Delray Beach", #
"Doha", "Dubai", "Eastbourne", "Estoril", "Gstaad", "Halle", #
"Hamburg", "Houston", "Kitzbuhel", "Kuala Lumpur", "London / Queen's Club", #
"Marseille", "Memphis", "Metz", "Montpellier", "Moscow", "Munich", #
"New York", "Newport", "Nice", "North Carolina", "Rio de Janeiro", #
"Roland Garros", "Rotterdam", "s-Hertogenbosch", "San Jose", #
"Sao Paulo", "Southfields", "St. Petersburg", "Stockholm", "Stuttgart", #
"Sydney", "Tokyo", "Umag", "Valencia", "Vienna", "Vina del Mar", #
"Washington", "Zagreb"), class = "factor"), tournament = structure(c(1L, #
9L, 48L, 61L, 14L, 38L, 53L, 36L, 13L, 32L, 51L, 30L, 7L, 55L, #
8L, 54L, 52L, 18L, 17L, 16L, 20L, 28L, 5L, 22L, 45L, 23L, 4L, #
44L, 21L, 27L, 11L, 25L, 10L, 34L, 3L, 40L, 57L, 37L, 42L, 33L, #
12L, 29L, 41L, 47L, 26L, 2L, 50L, 15L, 56L, 39L, 31L, 35L, 6L, #
46L, 60L, 58L, 59L, 24L, 49L, 19L, 62L, 63L, 43L), .Label = c("Abierto Mexicano Telcel", #
"ABN AMRO World Tennis Tournament", "Aegon Championships", "Aegon International", #
"Aircel Chennai Open", "Apia International Sydney", "Australian Open", #
"Barcelona Open Banc Sabadell", "BB&T Atlanta Open", "bet-at-home Cup Kitzbuhel", #
"bet-at-home Open", "BMW Open by FWU AG", "BNP Paribas Masters", #
"BNP Paribas Open", "Brasil Open 2014", "BRD Nastase Tiriac Trophy", #
"Brisbane International presented by Suncorp", "China Open", #
"Citi Open", "Copa Claro", "Credit Agricole Suisse Open Gstaad", #
"Delray Beach Open by The Venetian Las Vegas", "Dubai Duty Free Tennis Championships", #
"Erste Bank Open", "Fayez Sarofim & Co. U.S. Men's Clay Court Championship", #
"French Open", "Gerry Weber Open", "Grand Prix Hassan II", "Hall of Fame Tennis Championships", #
"Heineken Open", "If Stockholm Open", "Internazionali BNL d'Italia", #
"Kremlin Cup by Bank of Moscow", "Malaysian Open, Kuala Lumpur", #
"MercedesCup", "Monte-Carlo Rolex Masters", "Moselle Open", "Mutua Madrid Open", #
"Negev Israel Open", "Open 13", "Open de Nice Cote d'Azur", #
"Open Sud de France", "PBZ Zagreb Indoors", "Portugal Open", #
"Qatar ExxonMobil Open", "Rakuten Japan Open Tennis Championships", #
"Rio Open presented by Claro hdtv", "Rogers Cup", "Royal Guard Open Chile", #
"SAP Open", "Shanghai Rolex Masters", "SkiStar Swedish Open", #
"Sony Open Tennis", "Swiss Indoors Basel", "Thailand Open", "Topshelf Open", #
"U.S. National Indoor Tennis Championships", "US Open", "Valencia Open 500", #
"Vegeta Croatia Open Umag", "Western & Southern Open - Cincinnati", #
"Wimbledon", "Winston-Salem Open"), class = "factor"), tier = structure(c(2L, #
1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 1L, 2L, 2L, 1L, #
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 1L), .Label = c("250", #
"500", "Grand Slam", "Masters 1000"), class = "factor"), rounds = c(5L, #
5L, 6L, 6L, 7L, 6L, 7L, 6L, 6L, 6L, 6L, 5L, 7L, 5L, 6L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 5L, 5L, #
5L, 6L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 6L, 7L, 6L, 5L), surface = structure(c(3L, #
1L, 3L, 3L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 3L, 3L, 3L, 1L, 3L, 1L, #
3L, 3L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, #
3L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 1L, 2L, #
3L, 3L, 1L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 2L, 3L, 3L), .Label = c("Clay", #
"Grass", "Hard"), class = "factor")), .Names = c("code", "location", #
"tournament", "tier", "rounds", "surface"), class = "data.frame", row.names = c(NA, #
-63L))#
#
 	check.tournament <- grep(tournament, tournaments$location)#
    if(length(check.tournament)==0) check.tournament <- grep(tournament, tournaments$tournament)#
    if(length(check.tournament)==0)#
    	stop("Tournament not found.")#
    if(length(check.tournament)>1){#
    	check.tournament <- check.tournament[1]#
    	warning("Multiple tournament matches. Taking first.")#
    }#
	tournament <- tournaments$code[check.tournament]    #
#
	rounds <- c("R128","R64","R32","R16","Q","S","F","W")#
	round <- which(rounds==round)#
	base.url <- "http://www.atpworldtour.com/Share/Match-Facts-Pop-Up.aspx?"#
	match.characteristic <- paste(paste("t=",tournament,collapse="",sep=""),#
								  paste("y=",year,collapse="",sep=""),#
								  paste("r=",round,collapse="",sep=""),#
								  paste("p=",code,collapse="",sep=""),sep="&")#
	file <- paste(base.url,match.characteristic,collapse="",sep="")#
#
file#
}#
Tags <- c("Tournament",#
			"Winner",#
			"Player",#
			"Time",#
			"Aces",#
			"Double Faults",#
			"1st Serve In",#
			"1st Serves",#
			"1st Serve Points Won",#
			"1st Serve Points",#
			"2nd Serve Points Won",#
			"2nd Serve In",#
			"Break Points Saved",#
			"Break Points Faced",#
			"Service Games Played",#
			"1st Serve Return Points Won","1st Serve Return Points",#
			"2nd Serve Return Points Won","2nd Serve Return Points",#
			"Break Points Converted","Break Points Opportunities",#
			"Return Games Played",#
			"Total Service Points Won","Total Service Points",#
			"Total Return Points Won","Total Return Points",#
			"Total Points Won","Total Points")#
#
is_match <- function(lines){#
	NotMatch <- length(grep("(/)",lines,fixed=TRUE))>0#
	if(!NotMatch){#
		NoData <- length(grep("N/A Bye",lines,fixed=TRUE))>0#
		}#
	else{#
		NoData <- TRUE#
	}#
#
!NoData#
}			#
#
check_winner <- function(winner.name, code){#
	if(length(grep(code,players$code))>0){ # IF PLAYER CODE IN #
		player.name <- players$player[which(players$code==code)]#
		return(as.numeric(player.name==winner.name))#
	}#
	else{#
		return(NA)#
	}#
}#
matchfacts_values <- function(lines) {#
    if (is_match(lines)) {#
        tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)#
#
    } #
    else {#
        fields <- rep(NA, length(Tags))#
        opponent.fields <- rep(NA, length(Tags))#
    }#
    result <- data.frame(#
    	V1 = c(as.character(fields[1]), as.character(opponent.fields[1])),#
    	V2 = c(as.numeric(fields[2]), as.character(opponent.fields[2])),#
    	V3 = c(as.character(fields[3]), as.character(opponent.fields[3])),#
    	V4 = c(as.character(fields[4]), as.character(opponent.fields[4])),#
    	V5 = c(as.numeric(fields[5]), as.character(opponent.fields[5])),#
    	V6 = c(as.numeric(fields[6]), as.character(opponent.fields[6])),#
    	V7 = c(as.numeric(fields[7]), as.character(opponent.fields[7])),#
    	V8 = c(as.numeric(fields[8]), as.character(opponent.fields[8])),#
    	V9 = c(as.numeric(fields[9]), as.character(opponent.fields[9])),#
    	V10 = c(as.numeric(fields[10]), as.character(opponent.fields[10])),#
    	V11 = c(as.numeric(fields[11]), as.character(opponent.fields[11])),#
    	V12 = c(as.numeric(fields[12]), as.character(opponent.fields[12])),#
    	V13 = c(as.numeric(fields[13]), as.character(opponent.fields[13])),#
    	V14 = c(as.numeric(fields[14]), as.character(opponent.fields[14])),#
    	V15 = c(as.numeric(fields[15]), as.character(opponent.fields[15])),#
    	V16 = c(as.numeric(fields[16]), as.character(opponent.fields[16])),#
    	V17 = c(as.numeric(fields[17]), as.character(opponent.fields[17])),#
    	V18 = c(as.numeric(fields[18]), as.character(opponent.fields[18])),#
    	V19 = c(as.numeric(fields[19]), as.character(opponent.fields[19])),#
    	V20 = c(as.numeric(fields[20]), as.character(opponent.fields[20])),#
    	V21 = c(as.numeric(fields[21]), as.character(opponent.fields[21])),#
    	V22 = c(as.numeric(fields[22]), as.character(opponent.fields[22])),#
    	V23 = c(as.numeric(fields[23]), as.character(opponent.fields[23])),#
    	V24 = c(as.numeric(fields[24]), as.character(opponent.fields[24])),#
    	V25 = c(as.numeric(fields[25]), as.character(opponent.fields[25])),#
    	V26 = c(as.numeric(fields[26]), as.character(opponent.fields[26])),#
    	V27 = c(as.numeric(fields[27]), as.character(opponent.fields[27])),#
    V28 = c(as.numeric(fields[28]), as.character(opponent.fields[28])),#
    	stringsAsFactors = FALSE#
    	)#
     names(result) <- Tags#
#
result     #
}#
#
fetch_matchfacts_apply <- function(tournament = "Madrid", #
								   year = 2012, #
								   round = "R64", #
								   code) {#
    URLMatchFacts <- fetch_matchfacts_url(tournament, year, round, code)#
    URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)#
    close(URLMatchFacts)#
matchfacts_values(MatchContent)#
}#
#
fetch_matchfacts <- function(tournament = "Madrid", year = 2012, player = "Nadal") {#
 	Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))#
#
 	if(all(is.na(Code)))#
 		stop("Player code cannot be found.")#
  	player <- player[!is.na(Code)]#
  	Code <- Code[!is.na(Code)]#
    # EXPAND (tournament, year) FOR EACH ROUND AND PLAYER#
    rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F", "W")#
    Round <- rep(rounds, length(tournament) * length(player))    #
    Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = Round,#
    			  MoreArgs = list(tournament = Tournament, #
    					round = Round,#
    					code = Code),#
    			SIMPLIFY = FALSE))#
    print(Result)#
    NoMatch <- apply(Result, 1, function(x) all(is.na(x)))#
    if(all(NoMatch)){#
    	Result$Year <- Year#
    	Result[1,]#
    }#
	else{#
	    Result <- Result[!NoMatch,]#
	    print(Result)#
	    print(NoMatch)#
	    print(Round[!NoMatch])#
    		row.names(Result) <- 1:nrow(Result)#
    		Result$Tournament <- Tournament[!NoMatch]#
    		Result$Year <- Year[!NoMatch]#
    		Result$Round <- rep(Round[!NoMatch], each = 2)#
    	Result#
    }#
} #
#
fetch_matchfacts_from_url <- function(url){#
	f <- function(url) {#
#
		    	year <- sub("(.*y=)([0-9][0-9][0-9][0-9])(.*)","\\2",url) #
		    on.exit(closeAllConnections())#
		    MatchContent <- readLines(con = url, warn = FALSE)#
		    result <- matchfacts_values(MatchContent)#
			result$Year <- year#
	result#
	}   #
do.call("rbind", lapply(FUN = f, X = url))#
}
URLMatchFacts <- fetch_matchfacts_url(tournament, year, "R64", "MC10")
URLMatchFacts
URLMatchFacts <- fetch_matchfacts_url(tournament, year, "W", "MC10")
URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)
head(MatchContent)
lines <- readLines(con = URLMatchFacts, warn = FALSE)
tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]
lines[fraction.index]
URLMatchFacts
URLMatchFacts <- fetch_matchfacts_url(tournament, year, "F", "MC10")
lines <- readLines(con = URLMatchFacts, warn = FALSE)
tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)
fields
opponent.fields
lines[grep("Round", lines)]
lines[grep("Round", lines) + 1]
lines[grep("Round", lines) + 2]
lines[grep("Round", lines) + 3]
sub("(.*>)(.*)(<.*)", "\\2", lines[grep("Round", lines) + 3])
lines[grep("2013", lines)]
fields
fetch_matchfacts_url <- function(tournament="ATP World Tour Masters 1000 Madrid", year=2012, round="R64", code){#
	       tournaments <- structure(list(code = c(807L, 6116L, 421L, 422L, 404L, 1536L, #
403L, 410L, 352L, 416L, 5014L, 301L, 580L, 1720L, 425L, 328L, #
316L, 747L, 339L, 773L, 506L, 360L, 891L, 499L, 451L, 495L, 741L, #
468L, 314L, 500L, 414L, 717L, 319L, 6003L, 311L, 496L, 402L, #
341L, 375L, 438L, 308L, 315L, 6120L, 6932L, 520L, 407L, 424L, #
533L, 440L, 568L, 429L, 321L, 338L, 329L, 439L, 560L, 573L, 337L, #
505L, 418L, 540L, 6242L, 2276L), location = structure(c(1L, 2L, #
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, #
17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, #
30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 43L, #
44L, 46L, 47L, 48L, 50L, 51L, 49L, 53L, 54L, 55L, 56L, 57L, 58L, #
42L, 59L, 60L, 61L, 62L, 52L, 45L, 63L), .Label = c("Acapulco", #
"Atlanta", "ATP World Tour Masters 1000 Canada", "ATP World Tour Masters 1000 Cincinnati", #
"ATP World Tour Masters 1000 Indian Wells", "ATP World Tour Masters 1000 Madrid", #
"ATP World Tour Masters 1000 Miami", "ATP World Tour Masters 1000 Monte Carlo", #
"ATP World Tour Masters 1000 Paris", "ATP World Tour Masters 1000 Rome", #
"ATP World Tour Masters 1000 Shanghai", "Auckland", "Australia", #
"Bangkok", "Barcelona", "Basel", "Bastad", "Beijing", "Brisbane", #
"Bucharest", "Buenos Aires", "Casablanca", "Chennai", "Delray Beach", #
"Doha", "Dubai", "Eastbourne", "Estoril", "Gstaad", "Halle", #
"Hamburg", "Houston", "Kitzbuhel", "Kuala Lumpur", "London / Queen's Club", #
"Marseille", "Memphis", "Metz", "Montpellier", "Moscow", "Munich", #
"New York", "Newport", "Nice", "North Carolina", "Rio de Janeiro", #
"Roland Garros", "Rotterdam", "s-Hertogenbosch", "San Jose", #
"Sao Paulo", "Southfields", "St. Petersburg", "Stockholm", "Stuttgart", #
"Sydney", "Tokyo", "Umag", "Valencia", "Vienna", "Vina del Mar", #
"Washington", "Zagreb"), class = "factor"), tournament = structure(c(1L, #
9L, 48L, 61L, 14L, 38L, 53L, 36L, 13L, 32L, 51L, 30L, 7L, 55L, #
8L, 54L, 52L, 18L, 17L, 16L, 20L, 28L, 5L, 22L, 45L, 23L, 4L, #
44L, 21L, 27L, 11L, 25L, 10L, 34L, 3L, 40L, 57L, 37L, 42L, 33L, #
12L, 29L, 41L, 47L, 26L, 2L, 50L, 15L, 56L, 39L, 31L, 35L, 6L, #
46L, 60L, 58L, 59L, 24L, 49L, 19L, 62L, 63L, 43L), .Label = c("Abierto Mexicano Telcel", #
"ABN AMRO World Tennis Tournament", "Aegon Championships", "Aegon International", #
"Aircel Chennai Open", "Apia International Sydney", "Australian Open", #
"Barcelona Open Banc Sabadell", "BB&T Atlanta Open", "bet-at-home Cup Kitzbuhel", #
"bet-at-home Open", "BMW Open by FWU AG", "BNP Paribas Masters", #
"BNP Paribas Open", "Brasil Open 2014", "BRD Nastase Tiriac Trophy", #
"Brisbane International presented by Suncorp", "China Open", #
"Citi Open", "Copa Claro", "Credit Agricole Suisse Open Gstaad", #
"Delray Beach Open by The Venetian Las Vegas", "Dubai Duty Free Tennis Championships", #
"Erste Bank Open", "Fayez Sarofim & Co. U.S. Men's Clay Court Championship", #
"French Open", "Gerry Weber Open", "Grand Prix Hassan II", "Hall of Fame Tennis Championships", #
"Heineken Open", "If Stockholm Open", "Internazionali BNL d'Italia", #
"Kremlin Cup by Bank of Moscow", "Malaysian Open, Kuala Lumpur", #
"MercedesCup", "Monte-Carlo Rolex Masters", "Moselle Open", "Mutua Madrid Open", #
"Negev Israel Open", "Open 13", "Open de Nice Cote d'Azur", #
"Open Sud de France", "PBZ Zagreb Indoors", "Portugal Open", #
"Qatar ExxonMobil Open", "Rakuten Japan Open Tennis Championships", #
"Rio Open presented by Claro hdtv", "Rogers Cup", "Royal Guard Open Chile", #
"SAP Open", "Shanghai Rolex Masters", "SkiStar Swedish Open", #
"Sony Open Tennis", "Swiss Indoors Basel", "Thailand Open", "Topshelf Open", #
"U.S. National Indoor Tennis Championships", "US Open", "Valencia Open 500", #
"Vegeta Croatia Open Umag", "Western & Southern Open - Cincinnati", #
"Wimbledon", "Winston-Salem Open"), class = "factor"), tier = structure(c(2L, #
1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 1L, 2L, 2L, 1L, #
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 1L), .Label = c("250", #
"500", "Grand Slam", "Masters 1000"), class = "factor"), rounds = c(5L, #
5L, 6L, 6L, 7L, 6L, 7L, 6L, 6L, 6L, 6L, 5L, 7L, 5L, 6L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 5L, 5L, #
5L, 6L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 6L, 7L, 6L, 5L), surface = structure(c(3L, #
1L, 3L, 3L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 3L, 3L, 3L, 1L, 3L, 1L, #
3L, 3L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, #
3L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 1L, 2L, #
3L, 3L, 1L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 2L, 3L, 3L), .Label = c("Clay", #
"Grass", "Hard"), class = "factor")), .Names = c("code", "location", #
"tournament", "tier", "rounds", "surface"), class = "data.frame", row.names = c(NA, #
-63L))#
#
 	check.tournament <- grep(tournament, tournaments$location)#
    if(length(check.tournament)==0) check.tournament <- grep(tournament, tournaments$tournament)#
    if(length(check.tournament)==0)#
    	stop("Tournament not found.")#
    if(length(check.tournament)>1){#
    	check.tournament <- check.tournament[1]#
    	warning("Multiple tournament matches. Taking first.")#
    }#
	tournament <- tournaments$code[check.tournament]    #
#
	rounds <- c("R128","R64","R32","R16","Q","S","F")#
	round <- which(rounds==round)#
	base.url <- "http://www.atpworldtour.com/Share/Match-Facts-Pop-Up.aspx?"#
	match.characteristic <- paste(paste("t=",tournament,collapse="",sep=""),#
								  paste("y=",year,collapse="",sep=""),#
								  paste("r=",round,collapse="",sep=""),#
								  paste("p=",code,collapse="",sep=""),sep="&")#
	file <- paste(base.url,match.characteristic,collapse="",sep="")#
#
file#
}#
Tags <- c("Tournament",#
			"Winner",#
			"Player",#
			"Time",#
			"Aces",#
			"Double Faults",#
			"1st Serve In",#
			"1st Serves",#
			"1st Serve Points Won",#
			"1st Serve Points",#
			"2nd Serve Points Won",#
			"2nd Serve In",#
			"Break Points Saved",#
			"Break Points Faced",#
			"Service Games Played",#
			"1st Serve Return Points Won","1st Serve Return Points",#
			"2nd Serve Return Points Won","2nd Serve Return Points",#
			"Break Points Converted","Break Points Opportunities",#
			"Return Games Played",#
			"Total Service Points Won","Total Service Points",#
			"Total Return Points Won","Total Return Points",#
			"Total Points Won","Total Points")#
#
is_match <- function(lines){#
	NotMatch <- length(grep("(/)",lines,fixed=TRUE))>0#
	if(!NotMatch){#
		NoData <- length(grep("N/A Bye",lines,fixed=TRUE))>0#
		}#
	else{#
		NoData <- TRUE#
	}#
#
!NoData#
}			#
#
check_winner <- function(winner.name, code){#
	if(length(grep(code,players$code))>0){ # IF PLAYER CODE IN #
		player.name <- players$player[which(players$code==code)]#
		return(as.numeric(player.name==winner.name))#
	}#
	else{#
		return(NA)#
	}#
}#
matchfacts_values <- function(lines) {#
    if (is_match(lines)) {#
        tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        Round <- sub("(.*>)(.*)(<.*)", "\\2", lines[grep("Round", lines) + 3])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)#
#
    } #
    else {#
        fields <- rep(NA, length(Tags))#
        opponent.fields <- rep(NA, length(Tags))#
    }#
    result <- data.frame(#
    	V1 = c(as.character(fields[1]), as.character(opponent.fields[1])),#
    	V2 = c(as.numeric(fields[2]), as.character(opponent.fields[2])),#
    	V3 = c(as.character(fields[3]), as.character(opponent.fields[3])),#
    	V4 = c(as.character(fields[4]), as.character(opponent.fields[4])),#
    	V5 = c(as.numeric(fields[5]), as.character(opponent.fields[5])),#
    	V6 = c(as.numeric(fields[6]), as.character(opponent.fields[6])),#
    	V7 = c(as.numeric(fields[7]), as.character(opponent.fields[7])),#
    	V8 = c(as.numeric(fields[8]), as.character(opponent.fields[8])),#
    	V9 = c(as.numeric(fields[9]), as.character(opponent.fields[9])),#
    	V10 = c(as.numeric(fields[10]), as.character(opponent.fields[10])),#
    	V11 = c(as.numeric(fields[11]), as.character(opponent.fields[11])),#
    	V12 = c(as.numeric(fields[12]), as.character(opponent.fields[12])),#
    	V13 = c(as.numeric(fields[13]), as.character(opponent.fields[13])),#
    	V14 = c(as.numeric(fields[14]), as.character(opponent.fields[14])),#
    	V15 = c(as.numeric(fields[15]), as.character(opponent.fields[15])),#
    	V16 = c(as.numeric(fields[16]), as.character(opponent.fields[16])),#
    	V17 = c(as.numeric(fields[17]), as.character(opponent.fields[17])),#
    	V18 = c(as.numeric(fields[18]), as.character(opponent.fields[18])),#
    	V19 = c(as.numeric(fields[19]), as.character(opponent.fields[19])),#
    	V20 = c(as.numeric(fields[20]), as.character(opponent.fields[20])),#
    	V21 = c(as.numeric(fields[21]), as.character(opponent.fields[21])),#
    	V22 = c(as.numeric(fields[22]), as.character(opponent.fields[22])),#
    	V23 = c(as.numeric(fields[23]), as.character(opponent.fields[23])),#
    	V24 = c(as.numeric(fields[24]), as.character(opponent.fields[24])),#
    	V25 = c(as.numeric(fields[25]), as.character(opponent.fields[25])),#
    	V26 = c(as.numeric(fields[26]), as.character(opponent.fields[26])),#
    	V27 = c(as.numeric(fields[27]), as.character(opponent.fields[27])),#
    V28 = c(as.numeric(fields[28]), as.character(opponent.fields[28])),#
    	stringsAsFactors = FALSE#
    	)#
     names(result) <- Tags#
	 result$Round <- Round#
result     #
}#
#
fetch_matchfacts_apply <- function(tournament = "Madrid", #
								   year = 2012, #
								   round = "R64", #
								   code) {#
    URLMatchFacts <- fetch_matchfacts_url(tournament, year, round, code)#
    URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)#
    close(URLMatchFacts)#
matchfacts_values(MatchContent)#
}#
#
fetch_matchfacts <- function(tournament = "Madrid", year = 2012, player = "Nadal") {#
 	Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))#
#
 	if(all(is.na(Code)))#
 		stop("Player code cannot be found.")#
  	player <- player[!is.na(Code)]#
  	Code <- Code[!is.na(Code)]#
    # EXPAND (tournament, year) FOR EACH ROUND AND PLAYER#
    rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F", "W")#
    Round <- rep(rounds, length(tournament) * length(player))    #
    Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = Round,#
    			  MoreArgs = list(tournament = Tournament, #
    					round = Round,#
    					code = Code),#
    			SIMPLIFY = FALSE))#
    print(Result)#
    NoMatch <- apply(Result, 1, function(x) all(is.na(x)))#
    if(all(NoMatch)){#
    	Result$Year <- year#
    	Result[1,]#
    }#
	else{#
	    Result <- Result[!NoMatch,]#
    		row.names(Result) <- 1:nrow(Result)#
      	Result$Year <- year#
    	Result#
    }#
} #
#
fetch_matchfacts_from_url <- function(url){#
	f <- function(url) {#
#
		    	year <- sub("(.*y=)([0-9][0-9][0-9][0-9])(.*)","\\2",url) #
		    on.exit(closeAllConnections())#
		    MatchContent <- readLines(con = url, warn = FALSE)#
		    result <- matchfacts_values(MatchContent)#
			result$Year <- year#
	result#
	}   #
do.call("rbind", lapply(FUN = f, X = url))#
}
fetch_matchfacts("Brisbane", 2013, "Murray A.")
fetch_matchfacts_url <- function(tournament="ATP World Tour Masters 1000 Madrid", year=2012, round="R64", code){#
	       tournaments <- structure(list(code = c(807L, 6116L, 421L, 422L, 404L, 1536L, #
403L, 410L, 352L, 416L, 5014L, 301L, 580L, 1720L, 425L, 328L, #
316L, 747L, 339L, 773L, 506L, 360L, 891L, 499L, 451L, 495L, 741L, #
468L, 314L, 500L, 414L, 717L, 319L, 6003L, 311L, 496L, 402L, #
341L, 375L, 438L, 308L, 315L, 6120L, 6932L, 520L, 407L, 424L, #
533L, 440L, 568L, 429L, 321L, 338L, 329L, 439L, 560L, 573L, 337L, #
505L, 418L, 540L, 6242L, 2276L), location = structure(c(1L, 2L, #
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, #
17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, #
30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 43L, #
44L, 46L, 47L, 48L, 50L, 51L, 49L, 53L, 54L, 55L, 56L, 57L, 58L, #
42L, 59L, 60L, 61L, 62L, 52L, 45L, 63L), .Label = c("Acapulco", #
"Atlanta", "ATP World Tour Masters 1000 Canada", "ATP World Tour Masters 1000 Cincinnati", #
"ATP World Tour Masters 1000 Indian Wells", "ATP World Tour Masters 1000 Madrid", #
"ATP World Tour Masters 1000 Miami", "ATP World Tour Masters 1000 Monte Carlo", #
"ATP World Tour Masters 1000 Paris", "ATP World Tour Masters 1000 Rome", #
"ATP World Tour Masters 1000 Shanghai", "Auckland", "Australia", #
"Bangkok", "Barcelona", "Basel", "Bastad", "Beijing", "Brisbane", #
"Bucharest", "Buenos Aires", "Casablanca", "Chennai", "Delray Beach", #
"Doha", "Dubai", "Eastbourne", "Estoril", "Gstaad", "Halle", #
"Hamburg", "Houston", "Kitzbuhel", "Kuala Lumpur", "London / Queen's Club", #
"Marseille", "Memphis", "Metz", "Montpellier", "Moscow", "Munich", #
"New York", "Newport", "Nice", "North Carolina", "Rio de Janeiro", #
"Roland Garros", "Rotterdam", "s-Hertogenbosch", "San Jose", #
"Sao Paulo", "Southfields", "St. Petersburg", "Stockholm", "Stuttgart", #
"Sydney", "Tokyo", "Umag", "Valencia", "Vienna", "Vina del Mar", #
"Washington", "Zagreb"), class = "factor"), tournament = structure(c(1L, #
9L, 48L, 61L, 14L, 38L, 53L, 36L, 13L, 32L, 51L, 30L, 7L, 55L, #
8L, 54L, 52L, 18L, 17L, 16L, 20L, 28L, 5L, 22L, 45L, 23L, 4L, #
44L, 21L, 27L, 11L, 25L, 10L, 34L, 3L, 40L, 57L, 37L, 42L, 33L, #
12L, 29L, 41L, 47L, 26L, 2L, 50L, 15L, 56L, 39L, 31L, 35L, 6L, #
46L, 60L, 58L, 59L, 24L, 49L, 19L, 62L, 63L, 43L), .Label = c("Abierto Mexicano Telcel", #
"ABN AMRO World Tennis Tournament", "Aegon Championships", "Aegon International", #
"Aircel Chennai Open", "Apia International Sydney", "Australian Open", #
"Barcelona Open Banc Sabadell", "BB&T Atlanta Open", "bet-at-home Cup Kitzbuhel", #
"bet-at-home Open", "BMW Open by FWU AG", "BNP Paribas Masters", #
"BNP Paribas Open", "Brasil Open 2014", "BRD Nastase Tiriac Trophy", #
"Brisbane International presented by Suncorp", "China Open", #
"Citi Open", "Copa Claro", "Credit Agricole Suisse Open Gstaad", #
"Delray Beach Open by The Venetian Las Vegas", "Dubai Duty Free Tennis Championships", #
"Erste Bank Open", "Fayez Sarofim & Co. U.S. Men's Clay Court Championship", #
"French Open", "Gerry Weber Open", "Grand Prix Hassan II", "Hall of Fame Tennis Championships", #
"Heineken Open", "If Stockholm Open", "Internazionali BNL d'Italia", #
"Kremlin Cup by Bank of Moscow", "Malaysian Open, Kuala Lumpur", #
"MercedesCup", "Monte-Carlo Rolex Masters", "Moselle Open", "Mutua Madrid Open", #
"Negev Israel Open", "Open 13", "Open de Nice Cote d'Azur", #
"Open Sud de France", "PBZ Zagreb Indoors", "Portugal Open", #
"Qatar ExxonMobil Open", "Rakuten Japan Open Tennis Championships", #
"Rio Open presented by Claro hdtv", "Rogers Cup", "Royal Guard Open Chile", #
"SAP Open", "Shanghai Rolex Masters", "SkiStar Swedish Open", #
"Sony Open Tennis", "Swiss Indoors Basel", "Thailand Open", "Topshelf Open", #
"U.S. National Indoor Tennis Championships", "US Open", "Valencia Open 500", #
"Vegeta Croatia Open Umag", "Western & Southern Open - Cincinnati", #
"Wimbledon", "Winston-Salem Open"), class = "factor"), tier = structure(c(2L, #
1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 1L, 2L, 2L, 1L, #
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 1L), .Label = c("250", #
"500", "Grand Slam", "Masters 1000"), class = "factor"), rounds = c(5L, #
5L, 6L, 6L, 7L, 6L, 7L, 6L, 6L, 6L, 6L, 5L, 7L, 5L, 6L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 5L, 5L, #
5L, 6L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 6L, 7L, 6L, 5L), surface = structure(c(3L, #
1L, 3L, 3L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 3L, 3L, 3L, 1L, 3L, 1L, #
3L, 3L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, #
3L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 1L, 2L, #
3L, 3L, 1L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 2L, 3L, 3L), .Label = c("Clay", #
"Grass", "Hard"), class = "factor")), .Names = c("code", "location", #
"tournament", "tier", "rounds", "surface"), class = "data.frame", row.names = c(NA, #
-63L))#
#
 	check.tournament <- grep(tournament, tournaments$location)#
    if(length(check.tournament)==0) check.tournament <- grep(tournament, tournaments$tournament)#
    if(length(check.tournament)==0)#
    	stop("Tournament not found.")#
    if(length(check.tournament)>1){#
    	check.tournament <- check.tournament[1]#
    	warning("Multiple tournament matches. Taking first.")#
    }#
	tournament <- tournaments$code[check.tournament]    #
#
	rounds <- c("R128","R64","R32","R16","Q","S","F")#
	round <- which(rounds==round)#
	base.url <- "http://www.atpworldtour.com/Share/Match-Facts-Pop-Up.aspx?"#
	match.characteristic <- paste(paste("t=",tournament,collapse="",sep=""),#
								  paste("y=",year,collapse="",sep=""),#
								  paste("r=",round,collapse="",sep=""),#
								  paste("p=",code,collapse="",sep=""),sep="&")#
	file <- paste(base.url,match.characteristic,collapse="",sep="")#
#
file#
}#
Tags <- c("Tournament",#
			"Winner",#
			"Player",#
			"Time",#
			"Aces",#
			"Double Faults",#
			"1st Serve In",#
			"1st Serves",#
			"1st Serve Points Won",#
			"1st Serve Points",#
			"2nd Serve Points Won",#
			"2nd Serve In",#
			"Break Points Saved",#
			"Break Points Faced",#
			"Service Games Played",#
			"1st Serve Return Points Won","1st Serve Return Points",#
			"2nd Serve Return Points Won","2nd Serve Return Points",#
			"Break Points Converted","Break Points Opportunities",#
			"Return Games Played",#
			"Total Service Points Won","Total Service Points",#
			"Total Return Points Won","Total Return Points",#
			"Total Points Won","Total Points")#
#
is_match <- function(lines){#
	NotMatch <- length(grep("(/)",lines,fixed=TRUE))>0#
	if(!NotMatch){#
		NoData <- length(grep("N/A Bye",lines,fixed=TRUE))>0#
		}#
	else{#
		NoData <- TRUE#
	}#
#
!NoData#
}			#
#
check_winner <- function(winner.name, code){#
	if(length(grep(code,players$code))>0){ # IF PLAYER CODE IN #
		player.name <- players$player[which(players$code==code)]#
		return(as.numeric(player.name==winner.name))#
	}#
	else{#
		return(NA)#
	}#
}#
matchfacts_values <- function(lines) {#
    if (is_match(lines)) {#
        tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        Round <- sub("(.*>)(.*)(<.*)", "\\2", lines[grep("Round", lines) + 3])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)#
#
    } #
    else {#
        fields <- rep(NA, length(Tags))#
        opponent.fields <- rep(NA, length(Tags))#
    }#
    result <- data.frame(#
    	V1 = c(as.character(fields[1]), as.character(opponent.fields[1])),#
    	V2 = c(as.numeric(fields[2]), as.character(opponent.fields[2])),#
    	V3 = c(as.character(fields[3]), as.character(opponent.fields[3])),#
    	V4 = c(as.character(fields[4]), as.character(opponent.fields[4])),#
    	V5 = c(as.numeric(fields[5]), as.character(opponent.fields[5])),#
    	V6 = c(as.numeric(fields[6]), as.character(opponent.fields[6])),#
    	V7 = c(as.numeric(fields[7]), as.character(opponent.fields[7])),#
    	V8 = c(as.numeric(fields[8]), as.character(opponent.fields[8])),#
    	V9 = c(as.numeric(fields[9]), as.character(opponent.fields[9])),#
    	V10 = c(as.numeric(fields[10]), as.character(opponent.fields[10])),#
    	V11 = c(as.numeric(fields[11]), as.character(opponent.fields[11])),#
    	V12 = c(as.numeric(fields[12]), as.character(opponent.fields[12])),#
    	V13 = c(as.numeric(fields[13]), as.character(opponent.fields[13])),#
    	V14 = c(as.numeric(fields[14]), as.character(opponent.fields[14])),#
    	V15 = c(as.numeric(fields[15]), as.character(opponent.fields[15])),#
    	V16 = c(as.numeric(fields[16]), as.character(opponent.fields[16])),#
    	V17 = c(as.numeric(fields[17]), as.character(opponent.fields[17])),#
    	V18 = c(as.numeric(fields[18]), as.character(opponent.fields[18])),#
    	V19 = c(as.numeric(fields[19]), as.character(opponent.fields[19])),#
    	V20 = c(as.numeric(fields[20]), as.character(opponent.fields[20])),#
    	V21 = c(as.numeric(fields[21]), as.character(opponent.fields[21])),#
    	V22 = c(as.numeric(fields[22]), as.character(opponent.fields[22])),#
    	V23 = c(as.numeric(fields[23]), as.character(opponent.fields[23])),#
    	V24 = c(as.numeric(fields[24]), as.character(opponent.fields[24])),#
    	V25 = c(as.numeric(fields[25]), as.character(opponent.fields[25])),#
    	V26 = c(as.numeric(fields[26]), as.character(opponent.fields[26])),#
    	V27 = c(as.numeric(fields[27]), as.character(opponent.fields[27])),#
    V28 = c(as.numeric(fields[28]), as.character(opponent.fields[28])),#
    	stringsAsFactors = FALSE#
    	)#
     names(result) <- Tags#
	 result$Round <- Round#
result     #
}#
#
fetch_matchfacts_apply <- function(tournament = "Madrid", #
								   year = 2012, #
								   round = "R64", #
								   code) {#
    URLMatchFacts <- fetch_matchfacts_url(tournament, year, round, code)#
    URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)#
    close(URLMatchFacts)#
matchfacts_values(MatchContent)#
}#
#
fetch_matchfacts <- function(tournament = "Madrid", year = 2012, player = "Nadal") {#
 	Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))#
#
 	if(all(is.na(Code)))#
 		stop("Player code cannot be found.")#
  	player <- player[!is.na(Code)]#
  	Code <- Code[!is.na(Code)]#
    # EXPAND (tournament, year) FOR EACH ROUND AND PLAYER#
    rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F")#
    Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = rounds,#
    			  MoreArgs = list(tournament = Tournament, #
    					code = Code),#
    			SIMPLIFY = FALSE))#
    print(Result)#
    NoMatch <- apply(Result, 1, function(x) all(is.na(x)))#
    if(all(NoMatch)){#
    	Result$Year <- year#
    	Result[1,]#
    }#
	else{#
	    Result <- Result[!NoMatch,]#
    		row.names(Result) <- 1:nrow(Result)#
      	Result$Year <- year#
    	Result#
    }#
} #
#
fetch_matchfacts_from_url <- function(url){#
	f <- function(url) {#
#
		    	year <- sub("(.*y=)([0-9][0-9][0-9][0-9])(.*)","\\2",url) #
		    on.exit(closeAllConnections())#
		    MatchContent <- readLines(con = url, warn = FALSE)#
		    result <- matchfacts_values(MatchContent)#
			result$Year <- year#
	result#
	}   #
do.call("rbind", lapply(FUN = f, X = url))#
}
fetch_matchfacts("Brisbane", 2013, "Murray A.")
fetch_matchfacts_url <- function(tournament="ATP World Tour Masters 1000 Madrid", year=2012, round="R64", code){#
	       tournaments <- structure(list(code = c(807L, 6116L, 421L, 422L, 404L, 1536L, #
403L, 410L, 352L, 416L, 5014L, 301L, 580L, 1720L, 425L, 328L, #
316L, 747L, 339L, 773L, 506L, 360L, 891L, 499L, 451L, 495L, 741L, #
468L, 314L, 500L, 414L, 717L, 319L, 6003L, 311L, 496L, 402L, #
341L, 375L, 438L, 308L, 315L, 6120L, 6932L, 520L, 407L, 424L, #
533L, 440L, 568L, 429L, 321L, 338L, 329L, 439L, 560L, 573L, 337L, #
505L, 418L, 540L, 6242L, 2276L), location = structure(c(1L, 2L, #
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, #
17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, #
30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 43L, #
44L, 46L, 47L, 48L, 50L, 51L, 49L, 53L, 54L, 55L, 56L, 57L, 58L, #
42L, 59L, 60L, 61L, 62L, 52L, 45L, 63L), .Label = c("Acapulco", #
"Atlanta", "ATP World Tour Masters 1000 Canada", "ATP World Tour Masters 1000 Cincinnati", #
"ATP World Tour Masters 1000 Indian Wells", "ATP World Tour Masters 1000 Madrid", #
"ATP World Tour Masters 1000 Miami", "ATP World Tour Masters 1000 Monte Carlo", #
"ATP World Tour Masters 1000 Paris", "ATP World Tour Masters 1000 Rome", #
"ATP World Tour Masters 1000 Shanghai", "Auckland", "Australia", #
"Bangkok", "Barcelona", "Basel", "Bastad", "Beijing", "Brisbane", #
"Bucharest", "Buenos Aires", "Casablanca", "Chennai", "Delray Beach", #
"Doha", "Dubai", "Eastbourne", "Estoril", "Gstaad", "Halle", #
"Hamburg", "Houston", "Kitzbuhel", "Kuala Lumpur", "London / Queen's Club", #
"Marseille", "Memphis", "Metz", "Montpellier", "Moscow", "Munich", #
"New York", "Newport", "Nice", "North Carolina", "Rio de Janeiro", #
"Roland Garros", "Rotterdam", "s-Hertogenbosch", "San Jose", #
"Sao Paulo", "Southfields", "St. Petersburg", "Stockholm", "Stuttgart", #
"Sydney", "Tokyo", "Umag", "Valencia", "Vienna", "Vina del Mar", #
"Washington", "Zagreb"), class = "factor"), tournament = structure(c(1L, #
9L, 48L, 61L, 14L, 38L, 53L, 36L, 13L, 32L, 51L, 30L, 7L, 55L, #
8L, 54L, 52L, 18L, 17L, 16L, 20L, 28L, 5L, 22L, 45L, 23L, 4L, #
44L, 21L, 27L, 11L, 25L, 10L, 34L, 3L, 40L, 57L, 37L, 42L, 33L, #
12L, 29L, 41L, 47L, 26L, 2L, 50L, 15L, 56L, 39L, 31L, 35L, 6L, #
46L, 60L, 58L, 59L, 24L, 49L, 19L, 62L, 63L, 43L), .Label = c("Abierto Mexicano Telcel", #
"ABN AMRO World Tennis Tournament", "Aegon Championships", "Aegon International", #
"Aircel Chennai Open", "Apia International Sydney", "Australian Open", #
"Barcelona Open Banc Sabadell", "BB&T Atlanta Open", "bet-at-home Cup Kitzbuhel", #
"bet-at-home Open", "BMW Open by FWU AG", "BNP Paribas Masters", #
"BNP Paribas Open", "Brasil Open 2014", "BRD Nastase Tiriac Trophy", #
"Brisbane International presented by Suncorp", "China Open", #
"Citi Open", "Copa Claro", "Credit Agricole Suisse Open Gstaad", #
"Delray Beach Open by The Venetian Las Vegas", "Dubai Duty Free Tennis Championships", #
"Erste Bank Open", "Fayez Sarofim & Co. U.S. Men's Clay Court Championship", #
"French Open", "Gerry Weber Open", "Grand Prix Hassan II", "Hall of Fame Tennis Championships", #
"Heineken Open", "If Stockholm Open", "Internazionali BNL d'Italia", #
"Kremlin Cup by Bank of Moscow", "Malaysian Open, Kuala Lumpur", #
"MercedesCup", "Monte-Carlo Rolex Masters", "Moselle Open", "Mutua Madrid Open", #
"Negev Israel Open", "Open 13", "Open de Nice Cote d'Azur", #
"Open Sud de France", "PBZ Zagreb Indoors", "Portugal Open", #
"Qatar ExxonMobil Open", "Rakuten Japan Open Tennis Championships", #
"Rio Open presented by Claro hdtv", "Rogers Cup", "Royal Guard Open Chile", #
"SAP Open", "Shanghai Rolex Masters", "SkiStar Swedish Open", #
"Sony Open Tennis", "Swiss Indoors Basel", "Thailand Open", "Topshelf Open", #
"U.S. National Indoor Tennis Championships", "US Open", "Valencia Open 500", #
"Vegeta Croatia Open Umag", "Western & Southern Open - Cincinnati", #
"Wimbledon", "Winston-Salem Open"), class = "factor"), tier = structure(c(2L, #
1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 1L, 2L, 2L, 1L, #
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 1L), .Label = c("250", #
"500", "Grand Slam", "Masters 1000"), class = "factor"), rounds = c(5L, #
5L, 6L, 6L, 7L, 6L, 7L, 6L, 6L, 6L, 6L, 5L, 7L, 5L, 6L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 5L, 5L, #
5L, 6L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 6L, 7L, 6L, 5L), surface = structure(c(3L, #
1L, 3L, 3L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 3L, 3L, 3L, 1L, 3L, 1L, #
3L, 3L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, #
3L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 1L, 2L, #
3L, 3L, 1L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 2L, 3L, 3L), .Label = c("Clay", #
"Grass", "Hard"), class = "factor")), .Names = c("code", "location", #
"tournament", "tier", "rounds", "surface"), class = "data.frame", row.names = c(NA, #
-63L))#
#
 	check.tournament <- grep(tournament, tournaments$location)#
    if(length(check.tournament)==0) check.tournament <- grep(tournament, tournaments$tournament)#
    if(length(check.tournament)==0)#
    	stop("Tournament not found.")#
    if(length(check.tournament)>1){#
    	check.tournament <- check.tournament[1]#
    	warning("Multiple tournament matches. Taking first.")#
    }#
	tournament <- tournaments$code[check.tournament]    #
#
	rounds <- c("R128","R64","R32","R16","Q","S","F") # Assign number for url#
	round <- which(rounds==round)#
	base.url <- "http://www.atpworldtour.com/Share/Match-Facts-Pop-Up.aspx?"#
	match.characteristic <- paste(paste("t=",tournament,collapse="",sep=""),#
								  paste("y=",year,collapse="",sep=""),#
								  paste("r=",round,collapse="",sep=""),#
								  paste("p=",code,collapse="",sep=""),sep="&")#
	file <- paste(base.url,match.characteristic,collapse="",sep="")#
#
file#
}#
Tags <- c("Tournament",#
			"Winner",#
			"Player",#
			"Time",#
			"Aces",#
			"Double Faults",#
			"1st Serve In",#
			"1st Serves",#
			"1st Serve Points Won",#
			"1st Serve Points",#
			"2nd Serve Points Won",#
			"2nd Serve In",#
			"Break Points Saved",#
			"Break Points Faced",#
			"Service Games Played",#
			"1st Serve Return Points Won","1st Serve Return Points",#
			"2nd Serve Return Points Won","2nd Serve Return Points",#
			"Break Points Converted","Break Points Opportunities",#
			"Return Games Played",#
			"Total Service Points Won","Total Service Points",#
			"Total Return Points Won","Total Return Points",#
			"Total Points Won","Total Points")#
#
is_match <- function(lines){#
	NotMatch <- length(grep("(/)",lines,fixed=TRUE))>0#
	if(!NotMatch){#
		NoData <- length(grep("N/A Bye",lines,fixed=TRUE))>0#
		}#
	else{#
		NoData <- TRUE#
	}#
#
!NoData#
}			#
#
check_winner <- function(winner.name, code){#
	if(length(grep(code,players$code))>0){ # IF PLAYER CODE IN #
		player.name <- players$player[which(players$code==code)]#
		return(as.numeric(player.name==winner.name))#
	}#
	else{#
		return(NA)#
	}#
}#
matchfacts_values <- function(lines) {#
    if (is_match(lines)) {#
        tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        Round <- sub("(.*>)(.*)(<.*)", "\\2", lines[grep("Round", lines) + 3])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)#
#
    } #
    else {#
        fields <- rep(NA, length(Tags))#
        opponent.fields <- rep(NA, length(Tags))#
    }#
    result <- data.frame(#
    	V1 = c(as.character(fields[1]), as.character(opponent.fields[1])),#
    	V2 = c(as.numeric(fields[2]), as.character(opponent.fields[2])),#
    	V3 = c(as.character(fields[3]), as.character(opponent.fields[3])),#
    	V4 = c(as.character(fields[4]), as.character(opponent.fields[4])),#
    	V5 = c(as.numeric(fields[5]), as.character(opponent.fields[5])),#
    	V6 = c(as.numeric(fields[6]), as.character(opponent.fields[6])),#
    	V7 = c(as.numeric(fields[7]), as.character(opponent.fields[7])),#
    	V8 = c(as.numeric(fields[8]), as.character(opponent.fields[8])),#
    	V9 = c(as.numeric(fields[9]), as.character(opponent.fields[9])),#
    	V10 = c(as.numeric(fields[10]), as.character(opponent.fields[10])),#
    	V11 = c(as.numeric(fields[11]), as.character(opponent.fields[11])),#
    	V12 = c(as.numeric(fields[12]), as.character(opponent.fields[12])),#
    	V13 = c(as.numeric(fields[13]), as.character(opponent.fields[13])),#
    	V14 = c(as.numeric(fields[14]), as.character(opponent.fields[14])),#
    	V15 = c(as.numeric(fields[15]), as.character(opponent.fields[15])),#
    	V16 = c(as.numeric(fields[16]), as.character(opponent.fields[16])),#
    	V17 = c(as.numeric(fields[17]), as.character(opponent.fields[17])),#
    	V18 = c(as.numeric(fields[18]), as.character(opponent.fields[18])),#
    	V19 = c(as.numeric(fields[19]), as.character(opponent.fields[19])),#
    	V20 = c(as.numeric(fields[20]), as.character(opponent.fields[20])),#
    	V21 = c(as.numeric(fields[21]), as.character(opponent.fields[21])),#
    	V22 = c(as.numeric(fields[22]), as.character(opponent.fields[22])),#
    	V23 = c(as.numeric(fields[23]), as.character(opponent.fields[23])),#
    	V24 = c(as.numeric(fields[24]), as.character(opponent.fields[24])),#
    	V25 = c(as.numeric(fields[25]), as.character(opponent.fields[25])),#
    	V26 = c(as.numeric(fields[26]), as.character(opponent.fields[26])),#
    	V27 = c(as.numeric(fields[27]), as.character(opponent.fields[27])),#
    V28 = c(as.numeric(fields[28]), as.character(opponent.fields[28])),#
    	stringsAsFactors = FALSE#
    	)#
     names(result) <- Tags#
     print(Round)#
	# result$Round <- Round#
result     #
}#
#
fetch_matchfacts_apply <- function(tournament = "Madrid", #
								   year = 2012, #
								   round = "R64", #
								   code) {#
    URLMatchFacts <- fetch_matchfacts_url(tournament, year, round, code)#
    URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)#
    close(URLMatchFacts)#
matchfacts_values(MatchContent)#
}#
#
fetch_matchfacts <- function(tournament = "Madrid", year = 2012, player = "Nadal") {#
 	Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))#
#
 	if(all(is.na(Code)))#
 		stop("Player code cannot be found.")#
  	player <- player[!is.na(Code)]#
  	Code <- Code[!is.na(Code)]#
    # EXPAND (tournament, year) FOR EACH ROUND AND PLAYER#
    rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F")#
    Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = rounds,#
    			  MoreArgs = list(tournament = Tournament, #
    					code = Code),#
    			SIMPLIFY = FALSE))#
    print(Result)#
    NoMatch <- apply(Result, 1, function(x) all(is.na(x)))#
    if(all(NoMatch)){#
    	Result$Year <- year#
    	Result[1,]#
    }#
	else{#
	    Result <- Result[!NoMatch,]#
    		row.names(Result) <- 1:nrow(Result)#
      	Result$Year <- year#
    	Result#
    }#
} #
#
fetch_matchfacts_from_url <- function(url){#
	f <- function(url) {#
#
		    	year <- sub("(.*y=)([0-9][0-9][0-9][0-9])(.*)","\\2",url) #
		    on.exit(closeAllConnections())#
		    MatchContent <- readLines(con = url, warn = FALSE)#
		    result <- matchfacts_values(MatchContent)#
			result$Year <- year#
	result#
	}   #
do.call("rbind", lapply(FUN = f, X = url))#
}
fetch_matchfacts("Brisbane", 2013, "Murray A.")
fetch_matchfacts_url <- function(tournament="ATP World Tour Masters 1000 Madrid", year=2012, round="R64", code){#
	       tournaments <- structure(list(code = c(807L, 6116L, 421L, 422L, 404L, 1536L, #
403L, 410L, 352L, 416L, 5014L, 301L, 580L, 1720L, 425L, 328L, #
316L, 747L, 339L, 773L, 506L, 360L, 891L, 499L, 451L, 495L, 741L, #
468L, 314L, 500L, 414L, 717L, 319L, 6003L, 311L, 496L, 402L, #
341L, 375L, 438L, 308L, 315L, 6120L, 6932L, 520L, 407L, 424L, #
533L, 440L, 568L, 429L, 321L, 338L, 329L, 439L, 560L, 573L, 337L, #
505L, 418L, 540L, 6242L, 2276L), location = structure(c(1L, 2L, #
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, #
17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, #
30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 43L, #
44L, 46L, 47L, 48L, 50L, 51L, 49L, 53L, 54L, 55L, 56L, 57L, 58L, #
42L, 59L, 60L, 61L, 62L, 52L, 45L, 63L), .Label = c("Acapulco", #
"Atlanta", "ATP World Tour Masters 1000 Canada", "ATP World Tour Masters 1000 Cincinnati", #
"ATP World Tour Masters 1000 Indian Wells", "ATP World Tour Masters 1000 Madrid", #
"ATP World Tour Masters 1000 Miami", "ATP World Tour Masters 1000 Monte Carlo", #
"ATP World Tour Masters 1000 Paris", "ATP World Tour Masters 1000 Rome", #
"ATP World Tour Masters 1000 Shanghai", "Auckland", "Australia", #
"Bangkok", "Barcelona", "Basel", "Bastad", "Beijing", "Brisbane", #
"Bucharest", "Buenos Aires", "Casablanca", "Chennai", "Delray Beach", #
"Doha", "Dubai", "Eastbourne", "Estoril", "Gstaad", "Halle", #
"Hamburg", "Houston", "Kitzbuhel", "Kuala Lumpur", "London / Queen's Club", #
"Marseille", "Memphis", "Metz", "Montpellier", "Moscow", "Munich", #
"New York", "Newport", "Nice", "North Carolina", "Rio de Janeiro", #
"Roland Garros", "Rotterdam", "s-Hertogenbosch", "San Jose", #
"Sao Paulo", "Southfields", "St. Petersburg", "Stockholm", "Stuttgart", #
"Sydney", "Tokyo", "Umag", "Valencia", "Vienna", "Vina del Mar", #
"Washington", "Zagreb"), class = "factor"), tournament = structure(c(1L, #
9L, 48L, 61L, 14L, 38L, 53L, 36L, 13L, 32L, 51L, 30L, 7L, 55L, #
8L, 54L, 52L, 18L, 17L, 16L, 20L, 28L, 5L, 22L, 45L, 23L, 4L, #
44L, 21L, 27L, 11L, 25L, 10L, 34L, 3L, 40L, 57L, 37L, 42L, 33L, #
12L, 29L, 41L, 47L, 26L, 2L, 50L, 15L, 56L, 39L, 31L, 35L, 6L, #
46L, 60L, 58L, 59L, 24L, 49L, 19L, 62L, 63L, 43L), .Label = c("Abierto Mexicano Telcel", #
"ABN AMRO World Tennis Tournament", "Aegon Championships", "Aegon International", #
"Aircel Chennai Open", "Apia International Sydney", "Australian Open", #
"Barcelona Open Banc Sabadell", "BB&T Atlanta Open", "bet-at-home Cup Kitzbuhel", #
"bet-at-home Open", "BMW Open by FWU AG", "BNP Paribas Masters", #
"BNP Paribas Open", "Brasil Open 2014", "BRD Nastase Tiriac Trophy", #
"Brisbane International presented by Suncorp", "China Open", #
"Citi Open", "Copa Claro", "Credit Agricole Suisse Open Gstaad", #
"Delray Beach Open by The Venetian Las Vegas", "Dubai Duty Free Tennis Championships", #
"Erste Bank Open", "Fayez Sarofim & Co. U.S. Men's Clay Court Championship", #
"French Open", "Gerry Weber Open", "Grand Prix Hassan II", "Hall of Fame Tennis Championships", #
"Heineken Open", "If Stockholm Open", "Internazionali BNL d'Italia", #
"Kremlin Cup by Bank of Moscow", "Malaysian Open, Kuala Lumpur", #
"MercedesCup", "Monte-Carlo Rolex Masters", "Moselle Open", "Mutua Madrid Open", #
"Negev Israel Open", "Open 13", "Open de Nice Cote d'Azur", #
"Open Sud de France", "PBZ Zagreb Indoors", "Portugal Open", #
"Qatar ExxonMobil Open", "Rakuten Japan Open Tennis Championships", #
"Rio Open presented by Claro hdtv", "Rogers Cup", "Royal Guard Open Chile", #
"SAP Open", "Shanghai Rolex Masters", "SkiStar Swedish Open", #
"Sony Open Tennis", "Swiss Indoors Basel", "Thailand Open", "Topshelf Open", #
"U.S. National Indoor Tennis Championships", "US Open", "Valencia Open 500", #
"Vegeta Croatia Open Umag", "Western & Southern Open - Cincinnati", #
"Wimbledon", "Winston-Salem Open"), class = "factor"), tier = structure(c(2L, #
1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 1L, 2L, 2L, 1L, #
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 1L), .Label = c("250", #
"500", "Grand Slam", "Masters 1000"), class = "factor"), rounds = c(5L, #
5L, 6L, 6L, 7L, 6L, 7L, 6L, 6L, 6L, 6L, 5L, 7L, 5L, 6L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 5L, 5L, #
5L, 6L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 6L, 7L, 6L, 5L), surface = structure(c(3L, #
1L, 3L, 3L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 3L, 3L, 3L, 1L, 3L, 1L, #
3L, 3L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, #
3L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 1L, 2L, #
3L, 3L, 1L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 2L, 3L, 3L), .Label = c("Clay", #
"Grass", "Hard"), class = "factor")), .Names = c("code", "location", #
"tournament", "tier", "rounds", "surface"), class = "data.frame", row.names = c(NA, #
-63L))#
#
 	check.tournament <- grep(tournament, tournaments$location)#
    if(length(check.tournament)==0) check.tournament <- grep(tournament, tournaments$tournament)#
    if(length(check.tournament)==0)#
    	stop("Tournament not found.")#
    if(length(check.tournament)>1){#
    	check.tournament <- check.tournament[1]#
    	warning("Multiple tournament matches. Taking first.")#
    }#
	tournament <- tournaments$code[check.tournament]    #
#
	rounds <- c("R128","R64","R32","R16","Q","S","F") # Assign number for url#
	round <- which(rounds==round)#
	base.url <- "http://www.atpworldtour.com/Share/Match-Facts-Pop-Up.aspx?"#
	match.characteristic <- paste(paste("t=",tournament,collapse="",sep=""),#
								  paste("y=",year,collapse="",sep=""),#
								  paste("r=",round,collapse="",sep=""),#
								  paste("p=",code,collapse="",sep=""),sep="&")#
	file <- paste(base.url,match.characteristic,collapse="",sep="")#
#
file#
}#
Tags <- c("Tournament",#
			"Winner",#
			"Player",#
			"Time",#
			"Aces",#
			"Double Faults",#
			"1st Serve In",#
			"1st Serves",#
			"1st Serve Points Won",#
			"1st Serve Points",#
			"2nd Serve Points Won",#
			"2nd Serve In",#
			"Break Points Saved",#
			"Break Points Faced",#
			"Service Games Played",#
			"1st Serve Return Points Won","1st Serve Return Points",#
			"2nd Serve Return Points Won","2nd Serve Return Points",#
			"Break Points Converted","Break Points Opportunities",#
			"Return Games Played",#
			"Total Service Points Won","Total Service Points",#
			"Total Return Points Won","Total Return Points",#
			"Total Points Won","Total Points")#
#
is_match <- function(lines){#
	NotMatch <- length(grep("(/)",lines,fixed=TRUE))>0#
	if(!NotMatch){#
		NoData <- length(grep("N/A Bye",lines,fixed=TRUE))>0#
		}#
	else{#
		NoData <- TRUE#
	}#
#
!NoData#
}			#
#
check_winner <- function(winner.name, code){#
	if(length(grep(code,players$code))>0){ # IF PLAYER CODE IN #
		player.name <- players$player[which(players$code==code)]#
		return(as.numeric(player.name==winner.name))#
	}#
	else{#
		return(NA)#
	}#
}#
matchfacts_values <- function(lines) {#
    if (is_match(lines)) {#
        tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        Round <- sub("(.*>)(.*)(<.*)", "\\2", lines[grep("Round", lines) + 3])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)#
#
    } #
    else {#
        fields <- rep(NA, length(Tags))#
        opponent.fields <- rep(NA, length(Tags))#
    }#
    result <- data.frame(#
    	V1 = c(as.character(fields[1]), as.character(opponent.fields[1])),#
    	V2 = c(as.numeric(fields[2]), as.character(opponent.fields[2])),#
    	V3 = c(as.character(fields[3]), as.character(opponent.fields[3])),#
    	V4 = c(as.character(fields[4]), as.character(opponent.fields[4])),#
    	V5 = c(as.numeric(fields[5]), as.character(opponent.fields[5])),#
    	V6 = c(as.numeric(fields[6]), as.character(opponent.fields[6])),#
    	V7 = c(as.numeric(fields[7]), as.character(opponent.fields[7])),#
    	V8 = c(as.numeric(fields[8]), as.character(opponent.fields[8])),#
    	V9 = c(as.numeric(fields[9]), as.character(opponent.fields[9])),#
    	V10 = c(as.numeric(fields[10]), as.character(opponent.fields[10])),#
    	V11 = c(as.numeric(fields[11]), as.character(opponent.fields[11])),#
    	V12 = c(as.numeric(fields[12]), as.character(opponent.fields[12])),#
    	V13 = c(as.numeric(fields[13]), as.character(opponent.fields[13])),#
    	V14 = c(as.numeric(fields[14]), as.character(opponent.fields[14])),#
    	V15 = c(as.numeric(fields[15]), as.character(opponent.fields[15])),#
    	V16 = c(as.numeric(fields[16]), as.character(opponent.fields[16])),#
    	V17 = c(as.numeric(fields[17]), as.character(opponent.fields[17])),#
    	V18 = c(as.numeric(fields[18]), as.character(opponent.fields[18])),#
    	V19 = c(as.numeric(fields[19]), as.character(opponent.fields[19])),#
    	V20 = c(as.numeric(fields[20]), as.character(opponent.fields[20])),#
    	V21 = c(as.numeric(fields[21]), as.character(opponent.fields[21])),#
    	V22 = c(as.numeric(fields[22]), as.character(opponent.fields[22])),#
    	V23 = c(as.numeric(fields[23]), as.character(opponent.fields[23])),#
    	V24 = c(as.numeric(fields[24]), as.character(opponent.fields[24])),#
    	V25 = c(as.numeric(fields[25]), as.character(opponent.fields[25])),#
    	V26 = c(as.numeric(fields[26]), as.character(opponent.fields[26])),#
    	V27 = c(as.numeric(fields[27]), as.character(opponent.fields[27])),#
    V28 = c(as.numeric(fields[28]), as.character(opponent.fields[28])),#
    	stringsAsFactors = FALSE#
    	)#
     names(result) <- Tags#
     print(Round)#
	# result$Round <- Round#
result     #
}#
#
fetch_matchfacts_apply <- function(tournament = "Madrid", #
								   year = 2012, #
								   round = "R64", #
								   code) {#
    URLMatchFacts <- fetch_matchfacts_url(tournament, year, round, code)#
    URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)#
    close(URLMatchFacts)#
matchfacts_values(MatchContent)#
}#
#
fetch_matchfacts <- function(tournament = "Madrid", year = 2012, player = "Nadal") {#
 	Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))#
#
 	if(all(is.na(Code)))#
 		stop("Player code cannot be found.")#
  	player <- player[!is.na(Code)]#
  	Code <- Code[!is.na(Code)]#
    # EXPAND (tournament, year) FOR EACH ROUND AND PLAYER#
    rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F")#
    Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = rounds,#
    			  MoreArgs = list(tournament = tournament, #
    					code = Code),#
    			SIMPLIFY = FALSE))#
    print(Result)#
    NoMatch <- apply(Result, 1, function(x) all(is.na(x)))#
    if(all(NoMatch)){#
    	Result$Year <- year#
    	Result[1,]#
    }#
	else{#
	    Result <- Result[!NoMatch,]#
    		row.names(Result) <- 1:nrow(Result)#
      	Result$Year <- year#
    	Result#
    }#
} #
#
fetch_matchfacts_from_url <- function(url){#
	f <- function(url) {#
#
		    	year <- sub("(.*y=)([0-9][0-9][0-9][0-9])(.*)","\\2",url) #
		    on.exit(closeAllConnections())#
		    MatchContent <- readLines(con = url, warn = FALSE)#
		    result <- matchfacts_values(MatchContent)#
			result$Year <- year#
	result#
	}   #
do.call("rbind", lapply(FUN = f, X = url))#
}
fetch_matchfacts("Brisbane", 2013, "Murray A.")
fetch_matchfacts_url <- function(tournament="ATP World Tour Masters 1000 Madrid", year=2012, round="R64", code){#
	       tournaments <- structure(list(code = c(807L, 6116L, 421L, 422L, 404L, 1536L, #
403L, 410L, 352L, 416L, 5014L, 301L, 580L, 1720L, 425L, 328L, #
316L, 747L, 339L, 773L, 506L, 360L, 891L, 499L, 451L, 495L, 741L, #
468L, 314L, 500L, 414L, 717L, 319L, 6003L, 311L, 496L, 402L, #
341L, 375L, 438L, 308L, 315L, 6120L, 6932L, 520L, 407L, 424L, #
533L, 440L, 568L, 429L, 321L, 338L, 329L, 439L, 560L, 573L, 337L, #
505L, 418L, 540L, 6242L, 2276L), location = structure(c(1L, 2L, #
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, #
17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, #
30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 43L, #
44L, 46L, 47L, 48L, 50L, 51L, 49L, 53L, 54L, 55L, 56L, 57L, 58L, #
42L, 59L, 60L, 61L, 62L, 52L, 45L, 63L), .Label = c("Acapulco", #
"Atlanta", "ATP World Tour Masters 1000 Canada", "ATP World Tour Masters 1000 Cincinnati", #
"ATP World Tour Masters 1000 Indian Wells", "ATP World Tour Masters 1000 Madrid", #
"ATP World Tour Masters 1000 Miami", "ATP World Tour Masters 1000 Monte Carlo", #
"ATP World Tour Masters 1000 Paris", "ATP World Tour Masters 1000 Rome", #
"ATP World Tour Masters 1000 Shanghai", "Auckland", "Australia", #
"Bangkok", "Barcelona", "Basel", "Bastad", "Beijing", "Brisbane", #
"Bucharest", "Buenos Aires", "Casablanca", "Chennai", "Delray Beach", #
"Doha", "Dubai", "Eastbourne", "Estoril", "Gstaad", "Halle", #
"Hamburg", "Houston", "Kitzbuhel", "Kuala Lumpur", "London / Queen's Club", #
"Marseille", "Memphis", "Metz", "Montpellier", "Moscow", "Munich", #
"New York", "Newport", "Nice", "North Carolina", "Rio de Janeiro", #
"Roland Garros", "Rotterdam", "s-Hertogenbosch", "San Jose", #
"Sao Paulo", "Southfields", "St. Petersburg", "Stockholm", "Stuttgart", #
"Sydney", "Tokyo", "Umag", "Valencia", "Vienna", "Vina del Mar", #
"Washington", "Zagreb"), class = "factor"), tournament = structure(c(1L, #
9L, 48L, 61L, 14L, 38L, 53L, 36L, 13L, 32L, 51L, 30L, 7L, 55L, #
8L, 54L, 52L, 18L, 17L, 16L, 20L, 28L, 5L, 22L, 45L, 23L, 4L, #
44L, 21L, 27L, 11L, 25L, 10L, 34L, 3L, 40L, 57L, 37L, 42L, 33L, #
12L, 29L, 41L, 47L, 26L, 2L, 50L, 15L, 56L, 39L, 31L, 35L, 6L, #
46L, 60L, 58L, 59L, 24L, 49L, 19L, 62L, 63L, 43L), .Label = c("Abierto Mexicano Telcel", #
"ABN AMRO World Tennis Tournament", "Aegon Championships", "Aegon International", #
"Aircel Chennai Open", "Apia International Sydney", "Australian Open", #
"Barcelona Open Banc Sabadell", "BB&T Atlanta Open", "bet-at-home Cup Kitzbuhel", #
"bet-at-home Open", "BMW Open by FWU AG", "BNP Paribas Masters", #
"BNP Paribas Open", "Brasil Open 2014", "BRD Nastase Tiriac Trophy", #
"Brisbane International presented by Suncorp", "China Open", #
"Citi Open", "Copa Claro", "Credit Agricole Suisse Open Gstaad", #
"Delray Beach Open by The Venetian Las Vegas", "Dubai Duty Free Tennis Championships", #
"Erste Bank Open", "Fayez Sarofim & Co. U.S. Men's Clay Court Championship", #
"French Open", "Gerry Weber Open", "Grand Prix Hassan II", "Hall of Fame Tennis Championships", #
"Heineken Open", "If Stockholm Open", "Internazionali BNL d'Italia", #
"Kremlin Cup by Bank of Moscow", "Malaysian Open, Kuala Lumpur", #
"MercedesCup", "Monte-Carlo Rolex Masters", "Moselle Open", "Mutua Madrid Open", #
"Negev Israel Open", "Open 13", "Open de Nice Cote d'Azur", #
"Open Sud de France", "PBZ Zagreb Indoors", "Portugal Open", #
"Qatar ExxonMobil Open", "Rakuten Japan Open Tennis Championships", #
"Rio Open presented by Claro hdtv", "Rogers Cup", "Royal Guard Open Chile", #
"SAP Open", "Shanghai Rolex Masters", "SkiStar Swedish Open", #
"Sony Open Tennis", "Swiss Indoors Basel", "Thailand Open", "Topshelf Open", #
"U.S. National Indoor Tennis Championships", "US Open", "Valencia Open 500", #
"Vegeta Croatia Open Umag", "Western & Southern Open - Cincinnati", #
"Wimbledon", "Winston-Salem Open"), class = "factor"), tier = structure(c(2L, #
1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 1L, 2L, 2L, 1L, #
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 1L, 2L, 3L, 1L, 1L), .Label = c("250", #
"500", "Grand Slam", "Masters 1000"), class = "factor"), rounds = c(5L, #
5L, 6L, 6L, 7L, 6L, 7L, 6L, 6L, 6L, 6L, 5L, 7L, 5L, 6L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 5L, 5L, #
5L, 6L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 5L, #
5L, 5L, 5L, 5L, 5L, 5L, 7L, 5L, 5L, 5L, 6L, 7L, 6L, 5L), surface = structure(c(3L, #
1L, 3L, 3L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 3L, 3L, 3L, 1L, 3L, 1L, #
3L, 3L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, #
3L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 1L, 2L, #
3L, 3L, 1L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 2L, 3L, 3L), .Label = c("Clay", #
"Grass", "Hard"), class = "factor")), .Names = c("code", "location", #
"tournament", "tier", "rounds", "surface"), class = "data.frame", row.names = c(NA, #
-63L))#
#
 	check.tournament <- grep(tournament, tournaments$location)#
    if(length(check.tournament)==0) check.tournament <- grep(tournament, tournaments$tournament)#
    if(length(check.tournament)==0)#
    	stop("Tournament not found.")#
    if(length(check.tournament)>1){#
    	check.tournament <- check.tournament[1]#
    	warning("Multiple tournament matches. Taking first.")#
    }#
	tournament <- tournaments$code[check.tournament]    #
#
	rounds <- c("R128","R64","R32","R16","Q","S","F") # Assign number for url#
	round <- which(rounds==round)#
	base.url <- "http://www.atpworldtour.com/Share/Match-Facts-Pop-Up.aspx?"#
	match.characteristic <- paste(paste("t=",tournament,collapse="",sep=""),#
								  paste("y=",year,collapse="",sep=""),#
								  paste("r=",round,collapse="",sep=""),#
								  paste("p=",code,collapse="",sep=""),sep="&")#
	file <- paste(base.url,match.characteristic,collapse="",sep="")#
#
file#
}#
Tags <- c("Tournament",#
			"Winner",#
			"Player",#
			"Time",#
			"Aces",#
			"Double Faults",#
			"1st Serve In",#
			"1st Serves",#
			"1st Serve Points Won",#
			"1st Serve Points",#
			"2nd Serve Points Won",#
			"2nd Serve In",#
			"Break Points Saved",#
			"Break Points Faced",#
			"Service Games Played",#
			"1st Serve Return Points Won","1st Serve Return Points",#
			"2nd Serve Return Points Won","2nd Serve Return Points",#
			"Break Points Converted","Break Points Opportunities",#
			"Return Games Played",#
			"Total Service Points Won","Total Service Points",#
			"Total Return Points Won","Total Return Points",#
			"Total Points Won","Total Points")#
#
is_match <- function(lines){#
	NotMatch <- length(grep("(/)",lines,fixed=TRUE))>0#
	if(!NotMatch){#
		NoData <- length(grep("N/A Bye",lines,fixed=TRUE))>0#
		}#
	else{#
		NoData <- TRUE#
	}#
#
!NoData#
}			#
#
check_winner <- function(winner.name, code){#
	if(length(grep(code,players$code))>0){ # IF PLAYER CODE IN #
		player.name <- players$player[which(players$code==code)]#
		return(as.numeric(player.name==winner.name))#
	}#
	else{#
		return(NA)#
	}#
}#
matchfacts_values <- function(lines) {#
    if (is_match(lines)) {#
        tournament.index <- grep("Tournaments", lines)#
        tournament.name <- sub("(.*Tournaments.*>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[tournament.index])#
        Round <- sub("(.*>)(.*)(<.*)", "\\2", lines[grep("Round", lines) + 3])#
        # Player Names#
        player.name.index <- grep("playerName", lines)#
        player.name <- sub("(.*playerName.>)([a-zA-Z].*)(<\\/a.*)", "\\2", lines[player.name.index])#
        # Get minutes played#
        time.index <- grep("minutes", lines)#
        time <- sub("(.*>)([0-9]+)(&nbsp.*)", "\\2", lines[time.index])#
        # firstCells with stat#
        index <- grep("firstCell.*>[0-9].*", lines)#
        # fraction fields#
        fraction.index <- grep("[0-9]\\/", lines[index])#
        not.fraction.index <- (1:length(index))[is.na(match(1:length(index), fraction.index))]#
        replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[index[not.fraction.index]])#
        fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[index[fraction.index]])#
        opponent.replacements <- sub("(.*>)([0-9]+)(<.*)", "\\2", lines[(index + 1)[not.fraction.index]])#
        opponent.fraction.replacements <- sub("(.*\\()([0-9]+\\/[0-9]+)(\\).*)", "\\2", lines[(index + 1)[fraction.index]])#
        player_stats <- index#
        player_stats[fraction.index] <- fraction.replacements#
        player_stats[not.fraction.index] <- replacements#
        opponent_stats <- index#
        opponent_stats[fraction.index] <- opponent.fraction.replacements#
        opponent_stats[not.fraction.index] <- opponent.replacements#
        fields <- lapply(player_stats, function(x) strsplit(x, "/")[[1]])#
        fields <- as.numeric(unlist(fields))#
        fields <- c(tournament.name, #
        			  as.numeric(player.name[1] == player.name[2]), player.name[2], time, fields)#
#
        opponent.fields <- lapply(opponent_stats, function(x) strsplit(x, "/")[[1]])#
        opponent.fields <- as.numeric(unlist(opponent.fields))#
        opponent.fields <- c(tournament.name, #
        				as.numeric(player.name[1] == player.name[3]), player.name[3], time, opponent.fields)#
#
    } #
    else {#
        fields <- rep(NA, length(Tags))#
        opponent.fields <- rep(NA, length(Tags))#
    }#
    result <- data.frame(#
    	V1 = c(as.character(fields[1]), as.character(opponent.fields[1])),#
    	V2 = c(as.numeric(fields[2]), as.character(opponent.fields[2])),#
    	V3 = c(as.character(fields[3]), as.character(opponent.fields[3])),#
    	V4 = c(as.character(fields[4]), as.character(opponent.fields[4])),#
    	V5 = c(as.numeric(fields[5]), as.character(opponent.fields[5])),#
    	V6 = c(as.numeric(fields[6]), as.character(opponent.fields[6])),#
    	V7 = c(as.numeric(fields[7]), as.character(opponent.fields[7])),#
    	V8 = c(as.numeric(fields[8]), as.character(opponent.fields[8])),#
    	V9 = c(as.numeric(fields[9]), as.character(opponent.fields[9])),#
    	V10 = c(as.numeric(fields[10]), as.character(opponent.fields[10])),#
    	V11 = c(as.numeric(fields[11]), as.character(opponent.fields[11])),#
    	V12 = c(as.numeric(fields[12]), as.character(opponent.fields[12])),#
    	V13 = c(as.numeric(fields[13]), as.character(opponent.fields[13])),#
    	V14 = c(as.numeric(fields[14]), as.character(opponent.fields[14])),#
    	V15 = c(as.numeric(fields[15]), as.character(opponent.fields[15])),#
    	V16 = c(as.numeric(fields[16]), as.character(opponent.fields[16])),#
    	V17 = c(as.numeric(fields[17]), as.character(opponent.fields[17])),#
    	V18 = c(as.numeric(fields[18]), as.character(opponent.fields[18])),#
    	V19 = c(as.numeric(fields[19]), as.character(opponent.fields[19])),#
    	V20 = c(as.numeric(fields[20]), as.character(opponent.fields[20])),#
    	V21 = c(as.numeric(fields[21]), as.character(opponent.fields[21])),#
    	V22 = c(as.numeric(fields[22]), as.character(opponent.fields[22])),#
    	V23 = c(as.numeric(fields[23]), as.character(opponent.fields[23])),#
    	V24 = c(as.numeric(fields[24]), as.character(opponent.fields[24])),#
    	V25 = c(as.numeric(fields[25]), as.character(opponent.fields[25])),#
    	V26 = c(as.numeric(fields[26]), as.character(opponent.fields[26])),#
    	V27 = c(as.numeric(fields[27]), as.character(opponent.fields[27])),#
    V28 = c(as.numeric(fields[28]), as.character(opponent.fields[28])),#
    	stringsAsFactors = FALSE#
    	)#
     names(result) <- Tags#
     if(length(Round) > 1)#
     	result$Round <- NA#
     else#
     	result$Round <- Round#
result     #
}#
#
fetch_matchfacts_apply <- function(tournament = "Madrid", #
								   year = 2012, #
								   round = "R64", #
								   code) {#
    URLMatchFacts <- fetch_matchfacts_url(tournament, year, round, code)#
    URLMatchFacts <- url(URLMatchFacts)#
    MatchContent <- readLines(con = URLMatchFacts, warn = FALSE)#
    close(URLMatchFacts)#
matchfacts_values(MatchContent)#
}#
#
fetch_matchfacts <- function(tournament = "Madrid", year = 2012, player = "Nadal") {#
 	Code <- mapply(tryCatch(function(player, year){fetch_player_code(player, year)}, error = function(x) NA),#
 		player = player, MoreArgs = list(year = year))#
#
 	if(all(is.na(Code)))#
 		stop("Player code cannot be found.")#
  	player <- player[!is.na(Code)]#
  	Code <- Code[!is.na(Code)]#
    # EXPAND (tournament, year) FOR EACH ROUND AND PLAYER#
    rounds <- c("R128", "R64", "R32", "R16", "Q", "S", "F")#
    Result <- do.call("rbind",#
    			mapply(fetch_matchfacts_apply, round = rounds,#
    			  MoreArgs = list(tournament = tournament, #
    					code = Code),#
    			SIMPLIFY = FALSE))#
    print(Result)#
    NoMatch <- apply(Result, 1, function(x) all(is.na(x)))#
    if(all(NoMatch)){#
    	Result$Year <- year#
    	Result[1,]#
    }#
	else{#
	    Result <- Result[!NoMatch,]#
    		row.names(Result) <- 1:nrow(Result)#
      	Result$Year <- year#
    	Result#
    }#
} #
#
fetch_matchfacts_from_url <- function(url){#
	f <- function(url) {#
#
		    	year <- sub("(.*y=)([0-9][0-9][0-9][0-9])(.*)","\\2",url) #
		    on.exit(closeAllConnections())#
		    MatchContent <- readLines(con = url, warn = FALSE)#
		    result <- matchfacts_values(MatchContent)#
			result$Year <- year#
	result#
	}   #
do.call("rbind", lapply(FUN = f, X = url))#
}
temp <- fetch_matchfacts("Brisbane", 2013, "Murray A.")
temp
temp <- fetch_matchfacts("Brisbane", 2012, "Murray A.")
temp
quit("no")
